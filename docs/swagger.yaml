definitions:
  database.Attendee:
    properties:
      eventId:
        type: integer
      id:
        type: integer
      userId:
        type: integer
    type: object
  database.Event:
    properties:
      date:
        type: string
      description:
        minLength: 10
        type: string
      id:
        type: integer
      location:
        minLength: 3
        type: string
      name:
        minLength: 3
        type: string
      ownerId:
        type: integer
    required:
    - date
    - description
    - location
    - name
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.loginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.loginResponse:
    properties:
      token:
        type: string
    type: object
  main.registerRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
  description: A rest API in Go using Gin framework
  title: GO Gin Rest API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: logs in a user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.loginResponse'
      summary: logs in a user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: registers a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
      summary: registers a new user
      tags:
      - auth
  /api/v1/events:
    get:
      consumes:
      - application/json
      description: Returns all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Event'
            type: array
      summary: Returns all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new event
      parameters:
      - description: Event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/database.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Event'
      summary: Creates a new event
      tags:
      - events
  /api/v1/events/{id}:
    delete:
      consumes:
      - application/json
      description: deletes an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: deletes an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Returns a single event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
      summary: Returns a single event
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Returns the updated event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
      summary: Returns the updated event
      tags:
      - events
  /api/v1/events/{id}/attendees/:
    get:
      consumes:
      - application/json
      description: get all attendees for an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Attendee'
            type: array
      security:
      - BearerAuth: []
      summary: get all attendees for an event
      tags:
      - attendees
  /api/v1/events/{id}/attendees/{userId}:
    delete:
      consumes:
      - application/json
      description: delete an attendees from an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: delete an attendees from an event
      tags:
      - attendees
    get:
      consumes:
      - application/json
      description: returns an attendees from an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Attendee'
      security:
      - BearerAuth: []
      summary: returns an attendees from an event
      tags:
      - attendees
    post:
      consumes:
      - application/json
      description: this endpoint is used to add a new attendee to an event using the
        "Event ID" in the param and attatches it to the user using the user id
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Attendee'
      security:
      - BearerAuth: []
      summary: adds an attendee to an event
      tags:
      - attendees
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer &lt; token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
